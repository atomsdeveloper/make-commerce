// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @default(uuid())
  clerkUserId       String              @unique // ID vindo do Clerk
  name              String?
  email             String?             @unique
  password          String?
  role              Role
  image             String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

enum Role {
  ADMIN
  READ
}
model Store {
  id             String         @id @default(uuid())
  name           String
  slug           String         @unique
  description    String
  avatarImageUrl String
  coverImageUrl  String
  categories     Category[]
  products       Products[]
  orders         Order[]
  stripeAccountId  String?
  createdAt      DateTime       @default(now())
  updateAt       DateTime       @updatedAt
}

model Category {
  id           String     @id @default(uuid())
  name         String
  store        Store @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId      String
  products     Products[]
  createdAt    DateTime   @default(now())
  updateAt     DateTime   @updatedAt
}

model Products {
  id             String         @id @default(uuid())
  name           String
  description    String
  price          Float
  imageUrl       String
  ingredients    String[]
  store          Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId        String
  category       Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId     String
  orderProduct   OrderProduct[]
  createdAt      DateTime       @default(now())
  updateAt       DateTime       @updatedAt
}

model Order {
  id                Int               @id @default(autoincrement())
  total             Float
  customerName      String
  customerCpf       String
  status            OrderStatus
  method            Method
  store             Store             @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId           String
  stripeSessionId   String?           @unique
  orderProducts     OrderProduct[]
  city              String            @default("")
  country           String            @default("")
  number            String            @default("")
  state             String            @default("")
  street            String            @default("")
  zipCode           String            @default("")
  createdAt         DateTime          @default(now())
  updateAt          DateTime          @updatedAt
}

model OrderProduct {
  id        String   @id @default(uuid())
  product   Products @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   Int
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  IN_PREPARATION
  PAYMENT_CONFIRMED
  PAYMENT_FAILED
  FINISHED
}

enum Method {
  MAIL
  MOTORBIKE
  PICKUP   
}